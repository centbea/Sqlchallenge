**Schema (PostgreSQL v13)**

    CREATE SCHEMA dannys_diner;
    SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---

**Query #1 solution**

    SELECT sales.customer_id, SUM(price) AS Total
    
    FROM dannys_diner.menu
    FULL JOIN dannys_diner.sales ON dannys_diner.sales.product_id = dannys_diner.menu.pid
    GROUP BY sales.customer_id;

| customer_id | total |
| ----------- | ----- |
| B           | 74    |
| C           | 36    |
| A           | 76    |

---
**Query #2 solution**
SELECT customer_id, COUNT(distinct(order_date)) AS Days_visited
FROM dannys_diner.sales
GROUP BY sales.customer_id

---

**Query #3**

    SELECT distinct sales.customer_id, menu.product_name, sales.order_date
    	
        FROM dannys_diner.menu
        FULL JOIN dannys_diner.sales ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
    	
       GROUP BY sales.customer_id, menu.product_name, sales.order_date
       ORDER BY sales.order_date ASC LIMIT 4;

| customer_id | product_name | order_date               |
| ----------- | ------------ | ------------------------ |
| B           | curry        | 2021-01-01T00:00:00.000Z |
| A           | curry        | 2021-01-01T00:00:00.000Z |
| C           | ramen        | 2021-01-01T00:00:00.000Z |
| A           | sushi        | 2021-01-01T00:00:00.000Z |

---

**Query #6**

    With rank as (
      SELECT S.customer_id, S.order_date, m.product_name,
      Dense_rank () over (partition by S.customer_id order by S.order_date) as rank
      From dannys_diner.sales s
      Join dannys_diner.menu m
      ON s.product_id = m.product_id
      Join dannys_diner.members mem
      ON mem.customer_id = s.customer_id
      WHERE s.order_date >= mem.join_date
      ) 
      
      SELECT customer_id, product_name
      FROM rank 
      where rank = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| B           | sushi        |
---

**Query #7**

    With rank as (
      SELECT S.customer_id, S.order_date, m.product_name,
      Dense_rank () over (partition by S.customer_id order by S.order_date) as rank
      From dannys_diner.sales s
      Join dannys_diner.menu m
      ON s.product_id = m.product_id
      Join dannys_diner.members mem
      ON mem.customer_id = s.customer_id
      WHERE s.order_date < mem.join_date
      ) 
      
      SELECT customer_id, product_name
      FROM rank 
      where rank = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | sushi        |
| A           | curry        |
| B           | curry        |

---
**Query #8**

    SELECT S.customer_id, count(s.product_id) as items, sum(m.price) as total_prejoin
    From dannys_diner.sales s
    Join dannys_diner.menu m
    ON m.product_id = s.product_id
    Join dannys_diner.members mem
    ON s.customer_id = mem.customer_id
    WHERE s.order_date < mem.join_date
    Group by s.customer_id;

| customer_id | items | total_prejoin |
| ----------- | ----- | ------------- |
| B           | 3     | 40            |
| A           | 2     | 25            |

---



